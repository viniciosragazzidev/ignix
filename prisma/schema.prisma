// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppRole {
  VISITOR
  MEMBER
  ADMIN
  OWNER
  BILLING
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model User {
  id            String    @id @default(cuid())
  name          String
  surname       String?
  image         String?
  email         String    @unique
  password      String?   @default(cuid())
  emailVerified DateTime?
  role          AppRole   @default(VISITOR)
birthdate DateTime?
  gender    String?
  cpf       String?
  phone     String?
  address   String?
  Account       Account[]
  Session       Session[]
  Authenticator Authenticator[]
  createdCompanies Company[] @relation("Creator")
  companies      Company[]   @relation("CompanyUsers")
  CompanyUser    CompanyUser[]

  @@map("users")
}

model Company {
  id          String    @id @default(cuid())
  name        String
  slugId      String    @map("slug_id")
  cnpj        String
  address     String
  city        String
  state       String
  email       String
  phone       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedById String?

  // Relacionamentos
  creatorId   String
  creator     User   @relation("Creator", fields: [creatorId], references: [id])
  users       User[] @relation("CompanyUsers")
  CompanyUser CompanyUser[]

  @@map("companies")
}

model CompanyUser {
  userId String
  companyId String
  user      User @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
  @@map("company_users")
}
